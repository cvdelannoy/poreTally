versions:
  flye: 'flye --version 2>&1'
  minimap2: 'minimap2 -V'
  pilon: 'pilon --version | grep -Po "(?<=version ).+"'
description: >
  Flye uses A-Bruijn graphs to assemble long error-prone reads. To do so, it follows
  arbitrary paths through the assembly graph and constructs new assembly graphs from
  these paths. This pipeline also contains short read polishing using Pilon.
commands: |
  flye --nano-raw {{input.fastq}} --genome-size {REFGENOME_SIZE} --out-dir . --threads {NB_THREADS}

  # Pilon manual advises to reserve a GB of memory for every mbase of input genome
  pilon_mem=$(({REFGENOME_SIZE} / 1000000))
  # I find pilon acts up even with small genomes so I set a minimum of 4GB
  if [ "${{{{pilon_mem}}}}" -lt "4" ]; then pilon_mem=4; fi

  # pilon round 1
  minimap2 -t {NB_THREADS} -Lax sr assembly.fasta {SHORT_READS} | samtools view -Sbt assembly.fasta - | samtools sort -@ {NB_THREADS} -o sr_mapped1.bam -
  samtools index sr_mapped1.bam
  pilon -Xmx${{{{pilon_mem}}}}g --genome assembly.fasta --bam sr_mapped1.bam --output pilon1

  # pilon round 2
  minimap2 -t {NB_THREADS} -Lax sr pilon1.fasta {SHORT_READS} | samtools view -Sbt pilon1.fasta - | samtools sort -@ {NB_THREADS} -o sr_mapped2.bam -
  samtools index sr_mapped2.bam
  pilon -Xmx${{{{pilon_mem}}}}g --genome pilon1.fasta --bam sr_mapped2.bam --output pilon2

  # pilon round 3
  minimap2 -t {NB_THREADS} -Lax sr pilon2.fasta {SHORT_READS} | samtools view -Sbt pilon2.fasta - | samtools sort -@ {NB_THREADS} -o sr_mapped3.bam -
  samtools index sr_mapped3.bam
  pilon -Xmx${{{{pilon_mem}}}}g --genome pilon2.fasta --bam sr_mapped3.bam --output pilon3
  cp pilon3.fasta {{output}}

conda:
  channels:
    - bioconda
    - conda-forge
  dependencies:
    - flye
    - minimap2
    - pilon
    - samtools
