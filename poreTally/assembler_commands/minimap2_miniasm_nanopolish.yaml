# When compiling your own yaml, note the following:
# - When referring to parameters in parameter files, use curly brackets, e.g. {WD}
# - Where you would normally use curly brackets, use double curly brackets, e.g. awk {print} becomes awk {{print}}
# - Escape single quotation marks (double quotation marks are fine), e.g. echo 'foo' --> echo \'foo\'

versions:
  minimap2: 'minimap2 -V'
  miniasm: 'miniasm -V'
  nanopolish: 'nanopolish --version | grep -Po "(?<=nanopolish version ).+"'
description: >
  Minimap2 is a fast all-vs-all mapper of reads that relies on sketches of sequences, composed of
  minimizers. Miniasm uses the found overlaps to construct an assembly graph.
  As a consensus step is lacking in this pipeline, post-assembly polishing is often required.
  Here, nanopolish is used to polish the assembly using the raw signal.
commands: |
  minimap2 -x ava-ont -t {{threads}} {{input.fastq}} {{input.fastq}} | gzip -1 > minimap2.paf.gz
  miniasm -f {{input.fastq}} minimap2.paf.gz > minimap2_miniasm.gfa
  awk '/^S/{{{{print ">"$2"\\n"$3}}}}' minimap2_miniasm.gfa | fold > minimap2_miniasm.fasta
  minimap2 -d draft.mmi minimap2_miniasm.fasta
  cp {{input.fastq}} input.fastq
  minimap2 -ax map-ont -t {{threads}} draft.mmi  input.fastq | samtools sort -@ {{threads}} -o reads_sorted.bam -T reads_sorted.tmp -
  samtools index reads_sorted.bam
  nanopolish index -d {FAST5_DIR} input.fastq
  # threads_per_process=$( expr {{threads}} / 4 )
  threads_per_process=1
  np_path=$(command -v nanopolish | xargs realpath | xargs dirname)
  python "${{{{np_path}}}}"/nanopolish_makerange.py minimap2_miniasm.fasta | parallel --no-notice --results nanopolish.results -P 4 nanopolish variants --consensus polished.{{{{1}}}}.fa -w {{{{1}}}} -r input.fastq -b reads_sorted.bam -g minimap2_miniasm.fasta -t ${{{{threads_per_process}}}}
  python "${{{{np_path}}}}"/nanopolish_merge.py polished.*.fa > {{output}}
conda:
  channels:
    - bioconda
    - conda-forge
  dependencies:
    - minimap2
    - miniasm
    - pysam
    - nanopolish
    - samtools
    - parallel